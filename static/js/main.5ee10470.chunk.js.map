{"version":3,"sources":["components/Settings.svg","components/Header.tsx","components/Settings.tsx","components/Loading.svg","components/Arrow.tsx","components/WindsAloft.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","to","src","SettingsIcon","alt","className","Settings","Arrow","dir","viewBox","height","width","cx","cy","r","fill","stroke","strokeWidth","d","transform","InitialLocation","latitude","longitude","WindsAloft","useState","location","setLocation","elevation","setElevation","forecastJSON","setForecastJSON","status","setStatus","setCoordinates","position","Number","coords","toFixed","useEffect","navigator","geolocation","getCurrentPosition","a","console","log","queryStr","Object","entries","x","y","units","output","map","pair","join","url","fetch","response","json","USGS_Elevation_Point_Query_Service","Elevation_Query","Elevation","fetchElevationData","mode","fetchWindsAloftData","id","soundings","sounding","i","altitude","feetAGL","windSpd","mph","windDir","temp","f","reverse","header","op40","Loader","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ee10470.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Settings.696113c0.svg\";","import SettingsIcon from './Settings.svg';\nimport { Link } from 'react-router-dom';\nconst Header: React.FC = () => (\n  <div>\n    Winds Aloft Forecast\n    <Link to=\"/settings\">\n      <img src={SettingsIcon} alt=\"settings icon\" className=\"settings-icon\" />\n    </Link>\n  </div>\n);\n\nexport default Header;\n","const Settings: React.FC = () => <div>Settings</div>;\n\nexport default Settings;\n","export default __webpack_public_path__ + \"static/media/Loading.1831e8a7.svg\";","const Arrow: React.FC<{ dir: number }> = ({ dir }) => (\n  <svg viewBox=\"0 0 512 512\" height=\"2em\" width=\"2em\">\n    <circle\n      cx=\"256\"\n      cy=\"256\"\n      r=\"237.32505032019532\"\n      fill=\"hsl(210, 100%, 33%)\"\n      stroke=\"hsl(210, 100%, 66%)\"\n      strokeWidth=\"37.349899359609346\"\n    />\n    <path\n      d=\"\n        M 260.4 0\n        L 269.56814539771983 274.6749500197458\n        L 313.475583094649 335.1083534400135\n        L 256 512\n        L 198.52441690535102 335.1083534400135\n        L 242.43185460228014 274.6749500197458\n        L 251.6 0\n        Z\"\n      fill=\"hsl(30, 100%, 50%)\"\n      transform={`rotate(${dir}, 256, 256)`}\n    />\n  </svg>\n);\nexport default Arrow;\n","import React, { useState, useEffect } from 'react';\nimport Loader from './Loading.svg';\nimport Arrow from './Arrow';\n\nconst InitialLocation = {\n  latitude: 0,\n  longitude: 0,\n};\n\nconst WindsAloft: React.FC = () => {\n  const [location, setLocation] = useState(InitialLocation);\n  const [elevation, setElevation] = useState(0);\n  const [forecastJSON, setForecastJSON] = useState<WindsAloftData | null>(null);\n  const [status, setStatus] = useState('Loading...');\n\n  const setCoordinates = (position: GeolocationPosition) => {\n    setLocation({\n      latitude: Number(position.coords.latitude.toFixed(7)),\n      longitude: Number(position.coords.longitude.toFixed(7)),\n    });\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(setCoordinates);\n  }, []);\n\n  useEffect(() => {\n    const fetchElevationData = async (location: typeof InitialLocation) => {\n      if (elevation || !location.latitude) return;\n      setStatus('Determining location elevation...');\n      console.log('Fetching elevation.');\n      const queryStr = Object.entries({\n        x: location.longitude,\n        y: location.latitude,\n        units: 'Meters',\n        output: 'json',\n      })\n        .map(pair => pair.join('='))\n        .join('&');\n      const url = `https://nationalmap.gov/epqs/pqs.php?${queryStr}`;\n      const response = await fetch(url);\n      const json = await response.json();\n      setElevation(\n        json.USGS_Elevation_Point_Query_Service.Elevation_Query.Elevation\n      );\n      setStatus('');\n    };\n    fetchElevationData(location);\n  }, [location, elevation]);\n\n  useEffect(() => {\n    const fetchWindsAloftData = async (\n      location: typeof InitialLocation,\n      elevation: number\n    ) => {\n      if (forecastJSON || !elevation) return;\n      setStatus('Fetching winds aloft forecast data...');\n      console.log('Fetching winds aloft.');\n      const url = `https://weatherflow-dash.herokuapp.com/winds-aloft/${location.latitude}/${location.longitude}/${elevation}`;\n      const response = await fetch(url, { mode: 'cors' });\n      const json = await response.json();\n      console.log(json);\n      setForecastJSON(json);\n      setStatus('');\n    };\n\n    fetchWindsAloftData(location, elevation);\n  }, [location, elevation, forecastJSON]);\n\n  return forecastJSON ? (\n    <div id=\"winds-aloft-chart\">\n      {forecastJSON.soundings\n        .map((sounding, i) => (\n          <div className=\"sounding\" key={i}>\n            <div>{sounding.altitude.feetAGL} ft.</div>\n            <div>{sounding.windSpd.mph} mph</div>\n            <div>\n              <Arrow dir={sounding.windDir} />\n            </div>\n            <div>{sounding.windDir}°</div>\n            <div>{sounding.temp.f}°F</div>\n          </div>\n        ))\n        .reverse()}\n      <div className=\"footer\">\n        {forecastJSON.header}\n        <br />\n        {forecastJSON.op40}\n        <br />\n        Elevation: {forecastJSON.elevation}m MSL\n      </div>\n    </div>\n  ) : (\n    <div className=\"Loading-indicator\">\n      <h2>{status}</h2>\n      <img\n        src={Loader}\n        alt=\"Loading indicator\"\n        className=\"Loading-indicator-svg\"\n      />\n    </div>\n  );\n};\n\nexport default WindsAloft;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport Settings from './components/Settings';\nimport WindsAloft from './components/WindsAloft';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"Header\">\n          <Header />\n        </div>\n        <div className=\"Main\">\n          <Switch>\n            <Route path=\"/about\">\n              <h1>About</h1>\n            </Route>\n            <Route path=\"/settings\">\n              <Settings />\n            </Route>\n            <Route path=\"/\">\n              <WindsAloft />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}