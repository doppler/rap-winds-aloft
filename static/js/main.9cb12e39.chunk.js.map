{"version":3,"sources":["components/MenuIcon.svg","components/BackButton.svg","components/Header.tsx","components/ForwardButton.svg","components/Menu.tsx","components/About.tsx","components/Loading.svg","components/Arrow.tsx","components/WindsAloft.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","location","useLocation","history","useHistory","pathname","to","src","MenuIcon","alt","className","onClick","goBack","BackButton","Settings","path","push","ForwardButton","About","href","target","rel","Arrow","dir","viewBox","height","width","cx","cy","r","fill","stroke","strokeWidth","d","transform","InitialLocation","latitude","longitude","WindsAloft","useState","setLocation","elevation","setElevation","forecastJSON","setForecastJSON","status","setStatus","setCoordinates","position","Number","coords","toFixed","useEffect","navigator","geolocation","getCurrentPosition","cache","JSON","parse","sessionStorage","getItem","hour","Date","getUTCHours","abortController","AbortController","a","queryStr","Object","entries","x","y","units","output","map","pair","join","url","fetch","signal","response","json","USGS_Elevation_Point_Query_Service","Elevation_Query","Elevation","console","error","name","fetchElevationData","abort","setItem","stringify","fetchWindsAloftData","id","soundings","sounding","i","altitude","feetAGL","windSpd","mph","windDir","temp","f","reverse","header","op40","Loader","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cb12e39.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/MenuIcon.5493e055.svg\";","export default __webpack_public_path__ + \"static/media/BackButton.93e6347d.svg\";","import MenuIcon from './MenuIcon.svg';\nimport BackButton from './BackButton.svg';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\n\nconst Header: React.FC = () => {\n  const location = useLocation();\n  const history = useHistory();\n  return (\n    <div>\n      {location.pathname === '/' ? (\n        <Link to=\"/menu\">\n          <img src={MenuIcon} alt=\"menu icon\" className=\"menu-icon\" />\n        </Link>\n      ) : (\n        <button onClick={() => history.goBack()}>\n          <img src={BackButton} alt=\"back button\" className=\"menu-icon\" />\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/ForwardButton.fa4772a8.svg\";","import './Menu.css';\nimport { useHistory } from 'react-router-dom';\nimport ForwardButton from './ForwardButton.svg';\nconst Settings: React.FC = () => {\n  const history = useHistory();\n\n  const navigateTo = (path: string): void => {\n    history.push(path);\n  };\n\n  return (\n    <ul className=\"Menu\">\n      <li onClick={() => navigateTo('/about')}>\n        <div>About</div>\n        <div>\n          <img src={ForwardButton} alt=\"forward button\" className=\"icon\" />\n        </div>\n      </li>\n    </ul>\n  );\n};\n\nexport default Settings;\n","import './About.css';\nimport React from 'react';\n\nconst About = () => (\n  <div className=\"About\">\n    <h1>About</h1>\n    <h2>What it is</h2>\n    <p>\n      Display a current winds aloft forecast from{' '}\n      <a href=\"https://rucsoundings.noaa.gov/\" target=\"_blank\" rel=\"noopener\">\n        rucsoundings.noaa.gov\n      </a>\n      .\n    </p>\n\n    <p>\n      Your location is determined using your device's location service. The\n      ground elevation and winds aloft forecast for your location are fetched\n      from online services. The forecast data is cached on your device until the\n      start of each hour, and refetched after that.\n    </p>\n\n    <h2>Future plans</h2>\n\n    <ul>\n      <li>Integrate map service to fine-tune location</li>\n      <li>Provide preference option to view metric or imperial units</li>\n      <li>Provide preference option for light or dark theme</li>\n      <li>Provide option to clear forecast cache</li>\n      <li>Provide option to \"Save\" app to device</li>\n    </ul>\n\n    <h2>Contact</h2>\n\n    <p>David Rose (doppler@gmail.com)</p>\n\n    <p>\n      <a href=\"https://facebook.com/doppler\" target=\"_blank\" rel=\"noopener\">\n        Facebook\n      </a>\n    </p>\n  </div>\n);\n\nexport default About;\n","export default __webpack_public_path__ + \"static/media/Loading.1831e8a7.svg\";","const Arrow: React.FC<{ dir: number }> = ({ dir }) => (\n  <svg viewBox=\"0 0 512 512\" height=\"2em\" width=\"2em\">\n    <circle\n      cx=\"256\"\n      cy=\"256\"\n      r=\"237.32505032019532\"\n      fill=\"hsl(210, 100%, 33%)\"\n      stroke=\"hsl(210, 100%, 66%)\"\n      strokeWidth=\"37.349899359609346\"\n    />\n    <path\n      d=\"\n        M 260.4 0\n        L 269.56814539771983 274.6749500197458\n        L 313.475583094649 335.1083534400135\n        L 256 512\n        L 198.52441690535102 335.1083534400135\n        L 242.43185460228014 274.6749500197458\n        L 251.6 0\n        Z\"\n      fill=\"hsl(30, 100%, 50%)\"\n      transform={`rotate(${dir}, 256, 256)`}\n    />\n  </svg>\n);\nexport default Arrow;\n","import React, { useState, useEffect } from 'react';\nimport Loader from './Loading.svg';\nimport Arrow from './Arrow';\n\nconst InitialLocation = {\n  latitude: 0,\n  longitude: 0,\n};\n\nconst WindsAloft: React.FC = () => {\n  const [location, setLocation] = useState(InitialLocation);\n  const [elevation, setElevation] = useState(0);\n  const [forecastJSON, setForecastJSON] = useState<WindsAloftData | null>(null);\n  const [status, setStatus] = useState('Loading...');\n\n  const setCoordinates = (position: GeolocationPosition) => {\n    setLocation({\n      latitude: Number(position.coords.latitude.toFixed(7)),\n      longitude: Number(position.coords.longitude.toFixed(7)),\n    });\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(setCoordinates);\n  }, []);\n\n  useEffect(() => {\n    const cache: WindsAloftData | null = JSON.parse(\n      sessionStorage.getItem('cache') || 'null'\n    );\n    if (cache && cache.hour > new Date().getUTCHours()) {\n      setForecastJSON(cache);\n      setElevation(cache.elevation);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (elevation || !location.latitude) return;\n    const abortController = new AbortController();\n    const fetchElevationData = async (location: typeof InitialLocation) => {\n      try {\n        setStatus('Determining location elevation...');\n        const queryStr = Object.entries({\n          x: location.longitude,\n          y: location.latitude,\n          units: 'Meters',\n          output: 'json',\n        })\n          .map(pair => pair.join('='))\n          .join('&');\n        const url = `https://nationalmap.gov/epqs/pqs.php?${queryStr}`;\n        const response = await fetch(url, { signal: abortController.signal });\n        const json = await response.json();\n        setElevation(\n          json.USGS_Elevation_Point_Query_Service.Elevation_Query.Elevation\n        );\n        setStatus('');\n      } catch (e) {\n        console.error(e.name);\n      }\n    };\n    fetchElevationData(location);\n\n    return () => abortController.abort();\n  }, [location, elevation]);\n\n  useEffect(() => {\n    if (forecastJSON || !elevation) return;\n    const abortController = new AbortController();\n    const fetchWindsAloftData = async (\n      location: typeof InitialLocation,\n      elevation: number\n    ) => {\n      try {\n        setStatus('Fetching winds aloft forecast data...');\n        const url = `https://weatherflow-dash.herokuapp.com/winds-aloft/${location.latitude}/${location.longitude}/${elevation}`;\n        const response = await fetch(url, { signal: abortController.signal });\n        const json = await response.json();\n        setForecastJSON(json);\n        sessionStorage.setItem('cache', JSON.stringify(json));\n        setStatus('');\n      } catch (e) {\n        console.error(e.name);\n      }\n    };\n    fetchWindsAloftData(location, elevation);\n\n    return () => abortController.abort();\n  }, [location, elevation, forecastJSON]);\n\n  return forecastJSON ? (\n    <div id=\"winds-aloft-chart\">\n      {forecastJSON.soundings\n        .map((sounding, i) => (\n          <div className=\"sounding\" key={i}>\n            <div>{sounding.altitude.feetAGL} ft.</div>\n            <div>{sounding.windSpd.mph} mph</div>\n            <div>\n              <Arrow dir={sounding.windDir} />\n            </div>\n            <div>{sounding.windDir}°</div>\n            <div>{sounding.temp.f}°F</div>\n          </div>\n        ))\n        .reverse()}\n      <div className=\"footer\">\n        {forecastJSON.header}\n        <br />\n        {forecastJSON.op40}\n        <br />\n        Elevation: {forecastJSON.elevation}m MSL\n      </div>\n    </div>\n  ) : (\n    <div className=\"Loading-indicator\">\n      <h2>{status}</h2>\n      <img\n        src={Loader}\n        alt=\"Loading indicator\"\n        className=\"Loading-indicator-svg\"\n      />\n    </div>\n  );\n};\n\nexport default WindsAloft;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport Menu from './components/Menu';\nimport About from './components/About';\nimport WindsAloft from './components/WindsAloft';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"Header\">\n          <Header />\n        </div>\n        <div className=\"Main\">\n          <Switch>\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/menu\">\n              <Menu />\n            </Route>\n            <Route path=\"/\">\n              <WindsAloft />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}