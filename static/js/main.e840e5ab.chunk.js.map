{"version":3,"sources":["Loading.svg","utils/winds-aloft.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["transformWindsAloftData","body","elevation","split","header","op40","cape1","surface","rest","type","hour","day","month","year","latitude","longitude","soundings","Number","map","t","v","linType","pressure","altitudeMSL","temp","dewPt","windDir","windSpd","altitude","metersAGL","Math","round","feetAGL","metersMSL","feetMSL","c","f","toFixed","kts","mph","filter","o","reverse","InitialLocation","App","useState","location","setLocation","setElevation","forecastText","setForecastText","setCoordinates","position","coords","useEffect","navigator","geolocation","getCurrentPosition","fetchWindsAloftData","a","console","log","queryStr","Object","entries","airport","startSecs","floor","Date","now","endSecs","pair","join","url","fetch","mode","response","text","x","y","units","output","json","USGS_Elevation_Point_Query_Service","Elevation_Query","Elevation","fetchElevationData","className","data","src","Loader","alt","WindsAloft","id","sounding","i","dir","Arrow","viewBox","height","width","cx","cy","r","fill","stroke","strokeWidth","d","transform","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e840e5ab.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Loading.1831e8a7.svg\";","export const transformWindsAloftData = (\n  body: string,\n  elevation: number\n): WindsAloftData => {\n  const [header, op40, , cape1, , , surface, , ...rest] = body.split(/\\n/);\n  const [type, hour, day, month, year] = op40.split(/[\\s]+/);\n  const [, , , , latitude, longitude] = cape1.split(/[\\s]+/);\n  const soundings = [surface, ...rest];\n\n  return {\n    header,\n    op40,\n    type,\n    hour: Number(hour),\n    month,\n    day: Number(day),\n    year: Number(year),\n    latitude: Number(latitude),\n    longitude: Number(longitude),\n    elevation,\n    soundings: soundings\n      .map(t => {\n        let [\n          ,\n          linType,\n          pressure,\n          altitudeMSL,\n          temp,\n          dewPt,\n          windDir,\n          windSpd,\n        ] = t.split(/[\\s]+/).map(v => Number(v));\n        return {\n          linType,\n          pressure: pressure / 10,\n          altitude: {\n            metersAGL: Math.round(altitudeMSL - elevation),\n            feetAGL: Math.round((altitudeMSL - elevation) * 3.28084),\n            metersMSL: altitudeMSL,\n            feetMSL: Math.round(altitudeMSL * 3.28084),\n          },\n          temp: {\n            c: temp / 10,\n            f: Number(((temp / 10) * 1.8 + 32).toFixed(1)),\n          },\n          dewPt: {\n            c: dewPt / 10,\n            f: Number(((dewPt / 10) * 1.8 + 32).toFixed(1)),\n          },\n          windDir,\n          windSpd: {\n            kts: windSpd,\n            mph: Math.round(windSpd * 1.15078),\n          },\n        };\n      })\n      .filter(o => o.altitude.feetAGL < 16000)\n      .reverse(),\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Loader from './Loading.svg';\nimport { transformWindsAloftData } from './utils/winds-aloft';\n\nconst InitialLocation = {\n  latitude: 0,\n  longitude: 0,\n};\n\nfunction App() {\n  const [location, setLocation] = useState(InitialLocation);\n  const [elevation, setElevation] = useState(0);\n  const [forecastText, setForecastText] = useState('');\n\n  const setCoordinates = (position: GeolocationPosition) => {\n    setLocation({\n      latitude: position.coords.latitude,\n      longitude: position.coords.longitude,\n    });\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(setCoordinates);\n  }, []);\n\n  useEffect(() => {\n    const fetchWindsAloftData = async (location: typeof InitialLocation) => {\n      if (!location.latitude) return;\n      console.log('Fetching winds aloft.');\n      const queryStr = Object.entries({\n        airport: `${location.latitude}%2C${location.longitude}`,\n        startSecs: Math.floor(Date.now() / 1000),\n        endSecs: Math.floor(Date.now() / 1000) + 3600,\n      })\n        .map(pair => pair.join('='))\n        .join('&');\n      const url = `https://cors-anywhere.herokuapp.com/https://rucsoundings.noaa.gov/get_soundings.cgi?${queryStr}&`;\n      const response = await fetch(url, { mode: 'cors' });\n      setForecastText(await response.text());\n    };\n    const fetchElevationData = async (location: typeof InitialLocation) => {\n      if (!location.latitude) return;\n      console.log('Fetching elevation.');\n      const queryStr = Object.entries({\n        x: location.longitude,\n        y: location.latitude,\n        units: 'Meters',\n        output: 'json',\n      })\n        .map(pair => pair.join('='))\n        .join('&');\n      const url = `https://nationalmap.gov/epqs/pqs.php?${queryStr}`;\n      const response = await fetch(url);\n      const json = await response.json();\n      setElevation(\n        json.USGS_Elevation_Point_Query_Service.Elevation_Query.Elevation\n      );\n    };\n    fetchElevationData(location);\n    fetchWindsAloftData(location);\n  }, [location]);\n\n  return (\n    <div className=\"App\">\n      {forecastText ? (\n        <WindsAloft data={transformWindsAloftData(forecastText, elevation)} />\n      ) : (\n        <img\n          src={Loader}\n          alt=\"Loading indicator\"\n          className=\"Loading-indicator\"\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\nconst WindsAloft: React.FC<{ data: WindsAloftData }> = ({ data }) => (\n  <div id=\"winds-aloft-chart\">\n    {data.soundings.map((sounding, i) => (\n      <div className=\"sounding\" key={i}>\n        <div>{sounding.altitude.feetAGL} ft.</div>\n        <div>{sounding.windSpd.mph} mph</div>\n        <div>\n          <Arrow dir={sounding.windDir} />\n        </div>\n        <div>{sounding.windDir}°</div>\n        <div>{sounding.temp.f}°F</div>\n      </div>\n    ))}\n    <div className=\"footer\">\n      {data.header}\n      <br />\n      {data.op40}\n      <br />\n      Elevation: {data.elevation}m MSL\n    </div>\n  </div>\n);\n\nconst Arrow: React.FC<{ dir: number }> = ({ dir }) => (\n  <svg viewBox=\"0 0 512 512\" height=\"2em\" width=\"2em\">\n    <circle\n      cx=\"256\"\n      cy=\"256\"\n      r=\"237.32505032019532\"\n      fill=\"hsl(210, 100%, 33%)\"\n      stroke=\"hsl(210, 100%, 66%)\"\n      strokeWidth=\"37.349899359609346\"\n    />\n    <path\n      d=\"\n        M 260.4 0\n        L 269.56814539771983 274.6749500197458\n        L 313.475583094649 335.1083534400135\n        L 256 512\n        L 198.52441690535102 335.1083534400135\n        L 242.43185460228014 274.6749500197458\n        L 251.6 0\n        Z\"\n      fill=\"hsl(30, 100%, 50%)\"\n      transform={`rotate(${dir}, 256, 256)`}\n    />\n  </svg>\n);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}